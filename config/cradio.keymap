// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
// #include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define LSH(a)         &ht LSHIFT a
#define LMAC(a, b, c)  &ht LMETA a &ht LALT b &ht LCTRL c
#define LCAM(a, b, c)  &ht LCTRL a &ht LALT b &ht LMETA c
#define BTSL(a)        &bt BT_SEL a

/*
&mmv {
  acceleration-exponent = <1>;      // 1
  time-to-max-speed-ms = <500>;     // 40
  delay-ms = <0>;                   // 0
};

&msc {
  acceleration-exponent = <1>;      // 0
  time-to-max-speed-ms = <40>;      // 500
  delay-ms = <0>;                   // 10
};
*/

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };
    
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp DOT    &kp L      &kp D      &kp C      &kp V          &kp K      &kp F      &kp O      &kp U      &kp COMMA
            &kp N      &kp R      &kp T      &kp S      &kp G          &kp Y      &kp H      &kp A      &kp E      &kp I
            &kp X      LMAC(M,    B,         W)         &kp SEMI       &kp SQT    LCAM(P,    J,         Z)         &kp Q
                                             &lt 2 ESC  &lt 1 BSPC     LSH(SPC)   &lt 3 ENTER
            >;
        };

        sym_layer {
            bindings = <
            &kp SLCK   &kp GRAVE  &kp BSLH   &kp FSLH   &kp PSCRN      &kp PAUS   &kp HOME   &kp PG_DN  &kp PG_UP  &kp END
            &kp LBKT   &kp RBKT   &kp EQUAL  &kp MINUS  &kp K_APP      &kp INS    &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT
            &kp N1     LMAC(N2,   N3,        N4)        &kp N5         &kp N6     LCAM(N7,   N8,        N9)        &kp N0
                                             &kp TAB    &trans         LSH(CAPS)  &kp DEL
            >;
        };

        func_layer {
            bindings = <
            &kp C_NEXT      &kp C_VOL_DN   &kp C_MUTE &kp C_VOL_UP &kp C_BRI_UP         &kp F12    &trans         &trans         &trans       &trans // &msc SCRL_LEFT &msc SCRL_DOWN &msc SCRL_UP &msc SCRL_RIGHT
            &kp C_PREV      &mkp RCLK      &mkp MCLK  &mkp LCLK    &kp C_BRI_DN         &kp F11    &trans         &trans         &trans       &trans // &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_UP &mmv MOVE_RIGHT
            &kp F1          LMAC(F2,       F3,        F4)          &kp F5               &kp F6     LCAM(F7,       F8,            F9)          &kp F10
                                                      &trans       &kp C_PP             &trans     &kp F20
            >;
        };

        ctl_layer {
            bindings = <
           &bt BT_CLR  BTSL(0)    BTSL(1)    BTSL(2)   BTSL(3)              &trans     &trans     &trans     &trans    &trans
           &bootloader &trans     &trans     &trans    &trans               &trans     &trans     &trans     &trans    &bootloader
           &sys_reset  &trans     &trans     &trans    &trans               &trans     &trans     &trans     &trans    &sys_reset
                                             &trans    &trans               &trans     &trans
            >;
        };
    };
};

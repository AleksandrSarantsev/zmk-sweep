// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LSH(a)         &mht LSHIFT a
#define LMAC(a, b, c)  &mht LMETA a &ht LALT b &ht LCTRL c
#define LCAM(a, b, c)  &mht LCTRL a &ht LALT b &ht LMETA c
#define MO_SYM(a)      &lht 1 a
#define MO_FUNC(a)     &lht 2 a
#define BTSL(a)        &bt BT_SEL a


/ {
    behaviors {
        mht: modifier_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        lht: layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };
    };
    
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp DEL    &kp L      &kp D      &kp C         &kp V          &kp K      &kp F      &kp O      &kp U      &kp TAB
            &kp N      &kp R      &kp T      &kp S         &kp G          &kp Y      &kp H      &kp A      &kp E      &kp I
            &kp X      LMAC(M,    B,         W)            &kp PSCRN      &kp CAPS   LCAM(P,    J,         Z)         &kp Q
                                             MO_FUNC(ESC)  MO_SYM(BSPC)   LSH(SPC)   &kp ENTER
            >;
        };

        sym_layer {
            bindings = <
            &kp RBKT   &kp GRAVE  &kp DOT    &kp BSLH   &kp EQUAL     &kp PAUS   &kp HOME   &kp PG_DN  &kp PG_UP  &kp END
            &kp LBKT   &kp SQT    &kp COMMA  &kp FSLH   &kp MINUS     &kp INS    &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT
            &kp N1     LMAC(N2,   N3,        N4)        &kp N5        &kp N6     LCAM(N7,   N8,        N9)        &kp N0
                                             &kp SEMI   &trans        LSH(APP)   &kp SCLK
            >;
        };

        func_layer {
            bindings = <
            &kp C_BRI_UP    &kp C_PREV     &kp C_PP   &kp C_NEXT   &bootloader          &bootloader &trans         &trans         BTSL(3)     &kp F12
            &kp C_BRI_DN    &kp C_VOL_DN   &kp C_MUTE &kp C_VOL_UP &sys_reset           &sys_reset  BTSL(0)        BTSL(1)        BTSL(2)     &kp F11
            &kp F1          LMAC(F2,       F3,        F4)          &kp F5               &kp F6      LCAM(F7,       F8,            F9)         &kp F10
                                                      &trans       &trans               &kp LSHIFT &BT_CLR
            >;
        };

    };
};
